# codegen.toml

{{#if create_interface ~}}
# `models` contains locations for importing model sources and dependencies.
[[models]]
path = "."
files = [ {{#each project_models }}"{{ this }}",{{/each}} ]
# include wasmcloud core & base model
[[models]]
url = "https://wasmcloud.github.io/models/org.wasmcloud"
files = [ "wasmcloud-core-v0.smithy", "wasmcloud-model-v0.smithy" ]
{{~/if }}

##
## HTML documentation output
##
[html]

# (optional) template dir to scan (overrides compiled-in templates)
#templates = "docgen/templates"
# Top-level output directory for html generated files
output_dir = "html"

# Additional parameters for html generation
[html.parameters]

# name of template for page generation (default: 'namespace_doc')
#doc_template = "namespace_doc"

# whether to use minified tailwind.css (default false)
minified = true


##
## Rust language output
##
[rust]

# top-level output directory for rust files. If using build.rs,
# this folder is relative to the compiler's environment variable "OUT_DIR"
output_dir = "src"

[rust.parameters]

map_type = "std::collections::HashMap"

[rust.parameters.project]
package = "{{ project_name }}"
version = "{{ project_version }}"


# File-specific settings contain the following settings
# [[rust.files]]
# path - (required) path for generated output file, relative to output_dir above
# hbs - handlebars template name (without .hbs extension)
# Only applicable if file is generated by a handlebars template
# create_only - whether file should be generated only with --create (default false)
# namespace - limit generated shapes to shapes in this namespace
# * - any other fields are per-file parameters passed to codegen and renderer

# Additional namespaces may be added to this library crate by adding
# a rust source file below for each namespace,
# and importing each of them into src/lib.rs

{{#if create_interface }}
[[rust.files]]
path = "{{ project_namespace_file }}.rs"
namespace = "{{ project_namespace }}"
{{/if}}
