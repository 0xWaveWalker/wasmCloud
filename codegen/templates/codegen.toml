# codegen.toml
# Built-in codegen.toml used for new project creation

# `models` contains locations for importing model sources and dependencies.
# Each `[[models]]` entry contains a list of file names (without the .smithy
# extension), and either a `path` (local directory path), or a `url`.
# The complete file name is the concatenation of the url or path, plus
# the file name, plus a .smithy extension.
# url paths are cached locally to improve build performance and
# to enable offline builds
[[models]]
path = "."
files = [ "hello-world.smithy" ]

[[models]]
url = "https://wasmcloud.github.io/models/"
files = [ "wasmcloud-core.smithy", "wasmcloud-model.smithy" ]


# documentation generator, and linting and validation.
# Dependencies of the model should also be listed, even if the dependencies
# are not used for code generation, because they will be be used for documentation
# and should improve model lint and validation checks.
# models = [ ]

##
## HTML documentation output
##
[html]

# (optional) template dir to scan (overrides compiled-in templates)
#templates = "docgen/templates"
# Top-level output directory for html generated files
output_dir = "html"

# Additional parameters for html generation
[html.parameters]

# name of template for page generation (default: 'namespace_doc')
#doc_template = "namespace_doc"

# whether to use minified tailwind.css (default false)
minified = true


##
## Rust language output
##
[rust]

# (optional) limit
# (optional) directory containing additional handlebars templates
# These add-to and override templates compiled into the weld-binary or the codegen
# library
#templates = "codegen/templates/rust"

# top-level output directory for rust files. If using build.rs,
# this folder is relative to the compiler's environment variable "OUT_DIR"
output_dir = "rust"

[rust.parameters]
project_name = "my-project"
project_version = "0.1.0"

# any other parameters needed by code generator
map_type = "std::collections::HashMap"

# File-specific settings contain the following settings
# [[rust.files]]
# path        - (required) path for generated output file, relative to output_dir above
# hbs         - handlebars template name (without .hbs extension)
#               Only applicable if file is generated by a handlebars template
# create_only - whether file should be generated only with --create (default false)
# namespace   - limit generated shapes to shapes in this namespace
# *           - any other fields are per-file parameters passed to codegen and renderer

## interface-only files

[[rust.files]]
path = "src/lib.rs"
hbs = "rust.lib.rs"
if_defined = "create_interface"

[[rust.files]]
path = "build.rs"
hbs = "rust.build.rs"
if_defined = "create_interface"

## actor-only files

[[rust.files]]
path = "src/lib.rs"
hbs = "rust.actor.rs"
if_defined = "create_actor"

[[rust.files]]
path = "manifest.yaml"
hbs = "rust.actor.manifest.yaml"
if_defined = "create_actor"

[[rust.files]]
path = ".cargo/config.toml"
hbs  = "rust.cargo_config.toml"
if_defined = "create_actor"

## rust files - common for create modes

[[rust.files]]
path = "Cargo.toml"
hbs  = "rust.Cargo.toml"
if_defined = "project_create"

[[rust.files]]
path = "Makefile"
hbs = "rust.Makefile"
if_defined = "project_create"

[[rust.files]]
path = ".gitignore"
hbs = "rust.gitignore"
if_defined = "project_create"


##
## "poly" files - independent of target language
##
[poly]
output_dir = "."

[[poly.files]]
path = "codegen.toml"
hbs = "codegen.toml"
if_defined = "create_interface"

[[poly.files]]
path = "ping.smithy"
hbs = "ping.smithy"
if_defined = "create_interface"

